<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nds.library.manager.IManagerDAO">

	<!-- <select id="MessageList" resultType="com.nds.library.manager.Message"> 
		SELECT message_id, user_id, is_checked, title, content, sended_date, checked_date, 
		name FROM messages JOIN users USING(user_id) <if test="filter == 0"> 전체 where 
		sended_date is not null </if> <if test="filter == 1"> 읽은 메시지 where is_checked 
		= 1 </if> <if test="filter == 2"> 안읽은 메시지 where is_checked = 0 </if> order 
		by sended_date desc </select> -->
	<select id="MessageList" resultType="com.nds.library.manager.Message"
		parameterType="java.util.HashMap">
		SELECT message_id, user_id, is_checked, title, content, sended_date,
		checked_date, name
		FROM(
		select rownum rn, aa.*
		from(
		select *
		from messages JOIN users USING(user_id)
		order by message_id desc
		)aa)
		where rn between #{startNumber} and #{startNumber}+9
		<if test="filter == 0">
			and sended_date is not null
		</if>
		<if test="filter == 1">
			and is_checked = 1
		</if>
		<if test="filter == 2">
			and is_checked = 0
		</if>
		order by sended_date desc
	</select>

	<select id="messageCount" resultType="Integer">
		SELECT count(*)
		FROM messages JOIN users USING(user_id)
		<if test="filter == 0">
			where sended_date is not null
		</if>
		<if test="filter == 1">
			where is_checked = 1
		</if>
		<if test="filter == 2">
			where is_checked = 0
		</if>
	</select>

	<select id="messageDetail" resultType="com.nds.library.manager.Message">
		SELECT message_id,
		user_id, is_checked, title, content, sended_date, checked_date
		FROM
		messages
		WHERE message_id = #{msg_id}
	</select>

	<select id="requireBookList" parameterType="java.util.Map"
		resultType="com.nds.library.mypage.ReqAndDon">

		select b.* from
		(select rownum as rnum, a.* from
		(select req_don_id,
		image, title, author, publisher, name,
		TO_CHAR(reqanddon.REGISTERED_DATE,
		'yyyy-mm-dd') AS registered_date,
		current_state, TO_CHAR(finished_date,
		'yyyy-mm-dd') AS finished_date
		from users join reqanddon using(user_id)
		<if test="filter == 0">
			where (current_state='신청대기'
			or current_state='신청완료' or
			current_state='구매완료' or current_state='신청반려')
		</if>
		<if test="filter == 1">
			where current_state='구매완료'
		</if>
		<if test="filter == 2">
			where current_state='신청완료'
		</if>
		<if test="filter == 3">
			where current_state='신청대기'
		</if>
		<if test="filter == 4">
			where current_state='신청반려'
		</if>
		<![CDATA[
		order by reqanddon.registered_date desc) a )b
		where rnum >=#{start} and rnum <= #{end}]]>

	</select>


	<select id="bList" parameterType="java.util.Map"
		resultType="com.nds.library.mypage.ReqAndDon">

		select b.* from
		(select rownum as rnum, a.* from
		(select req_don_id,
		image, title, author, publisher, name,
		TO_CHAR(reqanddon.REGISTERED_DATE,
		'yyyy-mm-dd') AS registered_date,
		current_state, TO_CHAR(finished_date,
		'yyyy-mm-dd') AS finished_date
		from users join reqanddon using(user_id)
		<if test="filter == 0">  <!-- 전체 -->
			where (current_state='신청대기'
			or current_state='신청완료' or
			current_state='구매완료' or current_state='신청반려')
		</if>
		<if test="filter == 1">  <!-- 구매완료 -->
			where current_state='구매완료'
		</if>
		<if test="filter == 2">  <!-- 신청완료 -->
			where current_state='신청완료'
		</if>
		<if test="filter == 3"> <!-- 신청대기 -->
			where current_state='신청대기'
		</if>
		<if test="filter == 4">  <!-- 신청반려 -->
			where current_state='신청반려'
		</if>
		order by reqanddon.registered_date desc) a )b <![CDATA[
            where rnum >= #{start} and rnum <= #{end}
            ]]>
	</select>

	<select id="totalCount" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(*) from reqanddon

		<if test="kind == 'require'">
			<if test="filter == 0">  <!-- 전체 -->
				where (current_state='신청대기'
				or current_state='신청완료' or
				current_state='구매완료' or current_state='신청반려')
			</if>
			<if test="filter == 1">  <!-- 구매완료 -->
				where current_state='구매완료'
			</if>
			<if test="filter == 2">  <!-- 신청완료 -->
				where current_state='신청완료'
			</if>
			<if test="filter == 3"> <!-- 신청대기 -->
				where current_state='신청대기'
			</if>
			<if test="filter == 4">  <!-- 신청반려 -->
				where current_state='신청반려'
			</if>
		</if>
		<!-- where (current_state='기증대기' or current_state='기증완료' or current_state='기증반려') -->

		<if test="kind == 'donation'">
			<if test="filter == 0">  <!-- 전체 -->
				where (current_state='기증대기'
				or current_state='기증완료' or
				current_state='기증반려')
			</if>
			<if test="filter == 1">  <!-- 기증대기 -->
				where current_state='기증대기'
			</if>
			<if test="filter == 2"> <!-- 기증완료 -->
				where current_state='기증완료'
			</if>
			<if test="filter == 3">  <!-- 기증반려 -->
				where current_state='기증반려'
			</if>
		</if>
	</select>

	<select id="getReqAndDonBook" resultType="com.nds.library.mypage.ReqAndDon">
		SELECT req_don_id,
		name,
		TO_CHAR(reqanddon.REGISTERED_DATE,
		'yyyy-mm-dd') as
		registered_date,
		TO_CHAR(pubdate,
		'yyyy-mm-dd') AS pubdate, isbn, title,
		author,
		publisher, image, user_comment, explanation FROM users join
		reqanddon
		using(user_id) WHERE
		req_don_id = #{req_don_id}
	</select>

	<update id="requireConfirm">
		UPDATE ReqAndDon
		SET current_state = '신청완료',
		finished_date = SYSDATE,
		manager_comment = '승인 완료되었습니다.'
		WHERE
		req_don_id = #{req_don_id}
	</update>

	<update id="requireRegisterBook">
		UPDATE ReqAndDon
		SET current_state = '구매완료',
		finished_date = SYSDATE,
		manager_comment = '구입 완료하였습니다.'
		WHERE
		req_don_id = #{req_don_id}
	</update>


	<update id="requireRejectBook">
		UPDATE ReqAndDon
		SET current_state = '신청반려',
		finished_date = SYSDATE,
		manager_comment = #{manager_comment}
		WHERE
		req_don_id = #{req_don_id}
	</update>


	<select id="donationBookList" parameterType="java.util.Map"
		resultType="com.nds.library.mypage.ReqAndDon">
		select b.* from
		(select rownum as rnum, a.* from
		(select req_don_id,
		image, title, author, publisher, name,
		TO_CHAR(reqanddon.REGISTERED_DATE,
		'yyyy-mm-dd') AS registered_date,
		current_state, TO_CHAR(finished_date,
		'yyyy-mm-dd') AS finished_date
		from users join reqanddon using(user_id)
		<if test="filter == 0">  <!-- 전체 -->
			where (current_state='기증대기'
			or current_state='기증완료' or
			current_state='기증반려')
		</if>
		<if test="filter == 1"> <!-- 기증대기 -->
			where current_state='기증대기'
		</if>
		<if test="filter == 2">  <!-- 기증완료 -->
			where current_state='기증완료'
		</if>
		<if test="filter == 3">  <!-- 기증반려 -->
			where current_state='기증반려'
		</if>
		<![CDATA[
		order by reqanddon.registered_date desc) a )b
		where rnum >=#{start} and rnum <= #{end}]]>
	</select>

	<update id="donationRegisterBook">
		UPDATE ReqAndDon
		SET current_state = '기증완료',
		finished_date = SYSDATE,
		manager_comment = '기증 완료하였습니다.'
		WHERE
		req_don_id = #{req_don_id}
	</update>

	<update id="donationRejectBook">
		UPDATE ReqAndDon
		SET current_state = '기증반려',
		finished_date = SYSDATE,
		manager_comment = #{manager_comment}
		WHERE
		req_don_id = #{req_don_id}
	</update>

	<!-- <select id="memberList" resultType="com.nds.library.main.User"> SELECT 
		user_id, nds_number, name, position, department, picture, authority, TO_CHAR(registered_date,'yyyy-mm-dd') 
		as registered_date from users order by user_id </select> -->
	<select id="memberList" parameterType="java.util.HashMap"
		resultType="com.nds.library.main.User">
		SELECT user_id, nds_number,
		name, position, department,
		picture, authority,
		TO_CHAR(registered_date,'yyyy-mm-dd') as
		registered_date
		from(
		select rownum rn, aa.*
		from
		users aa)
		where rn
		between #{startNumber} and #{startNumber}+9
		order by user_id desc
	</select>

	<select id="countUser" resultType="Integer">
		SELECT count(*)
		from
		users
	</select>


	<select id="getUser" resultType="com.nds.library.main.User">
		SELECT user_id, nds_number,
		name, position, department, picture, authority,
		TO_CHAR(registered_date,'yyyy-mm-dd') as registered_date from users
		where user_id=#{user_id}
	</select>

	<select id="userBorrowList" resultType="com.nds.library.main.User">
		select title, publisher,
		current_state,
		pubdate, author, image,
		TO_CHAR(borrowing_date,'yyyy-mm-dd') as
		borrowing_date,
		TO_CHAR(scheduled_date,'yyyy-mm-dd') as
		scheduled_date,
		TO_CHAR(returned_date,'yyyy-mm-dd') as returned_date, DELAY_COUNT
		from
		borrowings natural join books
		natural join informations
		where
		user_id=#{user_id}
		order by
		borrowings.borrowing_date desc
	</select>

	<select id="userRequireList" resultType="com.nds.library.mypage.ReqAndDon">
		select req_don_id,
		title, publisher, author, pubdate, image, manager_comment,
		TO_CHAR(reqanddon.registered_date,'yyyy-mm-dd') as
		registered_date,
		TO_CHAR(finished_date,
		'yyyy-mm-dd') AS finished_date, current_state
		from reqanddon join users using(user_id)
		where user_id=#{user_id} and
		not (current_state='기증완료' or current_state='기증대기' or
		current_state='기증반려')
		order by reqanddon.registered_date desc
	</select>

	<select id="userDonationList" resultType="com.nds.library.mypage.ReqAndDon">
		select req_don_id,
		title, publisher, author, pubdate, image, manager_comment,
		TO_CHAR(reqanddon.registered_date,'yyyy-mm-dd') as
		registered_date,
		TO_CHAR(finished_date,
		'yyyy-mm-dd') AS finished_date, current_state
		from reqanddon join users using(user_id)
		where user_id=#{user_id} and
		(current_state='기증완료' or current_state='기증대기' or current_state='기증반려')
		order by reqanddon.registered_date desc
	</select>

	<insert id="messageSend">
		INSERT INTO messages (message_id, user_id, title,
		content, sended_date, is_checked)
		VALUES ((SELECT
		NVL(MAX(message_id),0)+1 FROM messages), #{user_id}, #{title},
		#{content}, SYSDATE, 0)
	</insert>

	<select id="getInformation" resultType="com.nds.library.mypage.ReqAndDon">
		select
		INFORMATION_ID,CATEGORY_ID,ISBN,TITLE,AUTHOR,PUBLISHER,IMAGE,PUBDATE,EXPLANATION
		from
		Informations where isbn = #{isbn}

	</select>

	<insert id="insertBook" parameterType="com.nds.library.mypage.ReqAndDon">
		Insert into BOOKS
		(BOOK_ID,INFORMATION_ID,CURRENT_STATE,REGISTERED_DATE,LOCATION) values
		((SELECT NVL(MAX(BOOK_ID),0)+1 FROM
		BOOKS),#{information_id},'대출가능',sysdate,

		<if test="category_id == 1">
			(select 'A_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'A%')
		</if>
		<if test="category_id == 2">
			(select 'B_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'B%')
		</if>
		<if test="category_id == 3">
			(select 'C_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'C%')
		</if>
		<if test="category_id == 4">
			(select 'D_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'D%')
		</if>
		<if test="category_id == 5">
			(select 'E_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'E%')
		</if>
		<if test="category_id == 6">
			(select 'F_' || (max(TO_NUMBER(SUBSTR(location, 3, 4)))+1)
			from books where location
			LIKE 'F%')
		</if>
		)
	</insert>

	<insert id="insertInformation" parameterType="com.nds.library.mypage.ReqAndDon">
		INSERT INTO
		informations (information_id, category_id, ISBN, title, author,
		publisher, image, pubdate, explanation)
		VALUES ((SELECT
		NVL(MAX(information_id),0)+1 FROM
		informations), #{category_id},
		#{isbn}, #{title}, #{author},
		#{publisher},#{image},
		#{pubdate},
		#{explanation})
	</insert>

	<select id="findUserByUserId" resultType="com.nds.library.main.User">
		SELECT name
		FROM users
		WHERE user_id = #{user_id}
	</select>

	<select id="managerBorrow" resultType="com.nds.library.main.Borrowing">
		SELECT borrowing_id, title, image, book_id, current_state,
		to_char(borrowing_date, 'yyyy-dd-mm') as borrowing_date,
		to_char(scheduled_date, 'yyyy-dd-mm') as scheduled_date,
		to_char(returned_date, 'yyyy-dd-mm') as returned_date
		from (((books
		join informations using(information_id)) left outer join
		borrowings
		using(book_id))) join users using(user_id)
		<if test="filter == 0">  <!-- 전체 -->
			where current_state = '대출' or current_state = '예약' or current_state =
			'대출대기'
		</if>
		<if test="filter == 1">  <!-- 예약 도서 -->
			where current_state = '예약'
		</if>
		<if test="filter == 2">  <!-- 대출 신청 도서 -->
			where current_state = '대출대기'
		</if>
		<if test="filter == 3">  <!-- 대출 도서 -->
			where current_state = '대출'
		</if>
		order by book_id
	</select>

	<update id="updateBorrowingDate">
		update borrowings
		set borrowing_date = SYSDATE,
		scheduled_date = SYSDATE + 14
		where borrowing_id = #{borrowing_id}
	</update>

	<update id="updateCurrentState" parameterType="java.util.Map">
		update books
		set
		current_state = #{current_state}
		where book_id = #{book_id}
	</update>

	<select id="getBorrowingById" resultType="com.nds.library.main.Borrowing">
		select *
		from borrowings
		where borrowing_id = #{borrowing_id}
	</select>

	<update id="updateReturnedDate">
		update borrowings
		set
		returned_date = SYSDATE
		where
		borrowing_id = #{borrowing_id}
	</update>

	<!-- <select id="bookList" parameterType="java.util.Map" resultType="com.nds.library.main.Borrowing"> 
		SELECT * FROM ((books join informations using(information_id)) left outer 
		join borrowings using(book_id)) left outer join users using(user_id) </select> -->
	<select id="bookList" parameterType="java.util.Map"
		resultType="com.nds.library.main.Borrowing">
		SELECT *
		FROM(
		select rownum rn, aa.*
		from(
		select *
		from
		((books join informations using(information_id)) left outer join
		borrowings
		using(book_id)) left outer join users using(user_id)) aa)
		where rn between #{startNumber} and #{startNumber}+9
		order by book_id
		desc
	</select>

	<select id="bookCount" parameterType="java.util.Map" resultType="Integer">
		SELECT count(*) FROM ((books join informations using(information_id))
		left outer
		join borrowings using(book_id)) left outer join users using(user_id)
	</select>

	<select id="getDamAndLosBook" resultType="com.nds.library.main.Borrowing">
		SELECT book_id, title,
		author, publisher, image,
		to_char(pubdate, 'YYYY-MM-DD') as pubdate,
		publisher, to_char(registered_date,
		'YYYY-MM-DD') as registered_date
		FROM books join informations
		using(information_id)
		WHERE book_id =
		#{book_id}
	</select>

	<update id="changeToDamOrLos">
		UPDATE books SET current_state = #{state} WHERE
		book_id = #{book_id}
	</update>

	<insert id="insertBorrowing">
		INSERT INTO borrowings(borrowing_id, book_id,
		user_id, borrowing_date, scheduled_date)
		VALUES (
		(SELECT NVL(MAX(borrowing_id),0)+1 FROM borrowings),
		#{book_id},
		#{user_id},
		SYSDATE,
		SYSDATE + 14
		)
	</insert>

	<update id="stopReserving">
		UPDATE reservations
		SET processing_state = 1
		WHERE reservation_id =#{reservation_id}
	</update>

	<select id="getReservationList" resultType="com.nds.library.main.Borrowing" parameterType="java.util.Map">
		select reservation_id, image, title, current_state, name, TO_CHAR(reservated_date,'yyyy-mm-dd') AS reservated_date, processing_state
		from ((books join informations using(information_id)) left outer join reservations using(book_id)) join users using(user_id)
		order by processing_state asc, reservation_id desc
	</select>
	
	<select id="getBookByReservationId" resultType="com.nds.library.main.Borrowing" parameterType="java.util.Map">
		SELECT *
		FROM reservations
		WHERE reservation_id = #{reservation_id}
	</select>
</mapper>   